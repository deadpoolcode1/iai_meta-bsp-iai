#!/bin/bash

M_MACHINE=imx8mpevk
QEMU_MACHINE=qemuarm64

#**************commands section**********************************************
#install prerequisites
setup()
{
 sudo apt-get install -y gawk wget git diffstat unzip texinfo gcc-multilib \
 build-essential chrpath socat cpio python python3 python3-pip python3-pexpect \
 xz-utils debianutils iputils-ping libsdl1.2-dev xterm libyaml-dev libssl-dev

 sudo apt-get -y install autoconf libtool libglib2.0-dev libarchive-dev \
 sed cvs subversion coreutils texi2html docbook-utils python-pysqlite2 \
 help2man make gcc g++ desktop-file-utils libgl1-mesa-dev libglu1-mesa-dev \
 mercurial automake groff curl lzop asciidoc u-boot-tools dos2unix mtd-utils pv \
 libncurses5 libncurses5-dev libncursesw5-dev libelf-dev zlib1g-dev bc rename git-lfs libsdl2-dev

 sudo apt-get install -y  python3-git

 sudo apt install -y bmap-tools

 sudo apt-get install -y bison g++-multilib git gperf libxml2-utils make python-networkx zip

 sudo apt-get install -y flex curl libncurses5-dev libssl-dev zlib1g-dev gawk minicom

 sudo apt-get install -y exfat-fuse exfat-utils device-tree-compiler liblz4-tool mtools xxhash zstd

 sudo apt-get install -y qemu-system
 mkdir ~/bin
 curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
 chmod a+x ~/bin/repo
 export PATH=~/bin:$PATH
}

#define machine type
machine_type()
{
        export MACHINE=$M_MACHINE
	DISTRO=fsl-imx-wayland MACHINE=${MACHINE} source iai-setup-release.sh
}

#define qemu type
qemu_type()
{
        export MACHINE=$QEMU_MACHINE
	DISTRO=fsl-imx-wayland MACHINE=${MACHINE} source iai-setup-release.sh
}

sanity_fix()
{
	file="sources/poky/meta/conf/sanity.conf"
	line='INHERIT += "sanity"'
	modified_line='#INHERIT += "sanity"'

	if grep -q "$line" "$file"; then
		echo "The line '$line' exists in the file."
		if grep -q "$modified_line" "$file"; then
			echo "The line '$modified_line' already exists and is commented out."
		else
			sed -i "s/$line/$modified_line/g" "$file"
			echo "The line '$line' has been modified to '$modified_line'."
		fi
	else
		echo "The line '$line' does not exist in the file."
	fi
	cp sources/meta-bsp-iai/recipes-kernel/linux/files/* sources/meta-imx/meta-bsp/recipes-kernel/linux/files/
}

sshd_fix()
{
	cp sources/meta-bsp-me9/tools/sshd_config sources/poky/meta/recipes-connectivity/openssh/openssh/sshd_config
}

fix_path()
{

# Define the path to the original bblayers.conf file
BBLAYERS_CONF_ORG="build/conf/bblayers.conf.org"
BBLAYERS_CONF="build/conf/bblayers.conf"
# Check if the original bblayers.conf file exists
if [ ! -f "$BBLAYERS_CONF_ORG" ]; then
    echo "Error: bblayers.conf.org not found at $BBLAYERS_CONF_ORG"
    exit 1
fi

# Update the BSPDIR variable using sed
sed -i 's|BSPDIR := "\${@os.path.abspath(os.path.dirname(d.getVar('"'"'FILE'"'"', True)) + '/../..')}"|BSPDIR := "\${@os.path.abspath(os.path.dirname(d.getVar('"'"'FILE'"'"', True)) + '/../')}"|' "$BBLAYERS_CONF_ORG"

sed -i 's|BSPDIR := "\${@os.path.abspath(os.path.dirname(d.getVar('"'"'FILE'"'"', True)) + '/../..')}"|BSPDIR := "\${@os.path.abspath(os.path.dirname(d.getVar('"'"'FILE'"'"', True)) + '/../')}"|' "$BBLAYERS_CONF"
echo "BSPDIR has been updated in bblayers.conf.org"
	
}
add_new_layer() {
	cp sources/meta-bsp-iai/bblayers.confpre conf/bblayers.conf.org
}

#build image for machine
build_image()
{
	machine_type
	sanity_fix
	bitbake -k core-image-base
	#fix_path
}

#build image for QEMU
build_image_qemu()
{
	qemu_type
	sanity_fix
	bitbake -k core-image-base
	#fix_path
}

rebuild_image()
{
        bitbake -k core-image-base
}

build_sdk()
{
	machine_type
	bitbake core-image-base -c populate_sdk
}

flash_to_emmc()
{
	pushd .
	cp sources/meta-bsp-iai/uuu sources/meta-bsp-iai/uuu build/tmp/deploy/images/imx8mpevk/
	cd build/tmp/deploy/images/imx8mpevk/
	sudo ./uuu -b emmc_all imx-boot core-image-base-imx8mpevk.wic.zst
	popd
}

update_meta_bsp_iai()
{
    pushd .
    cd  sources/meta-bsp-iai/
    git pull git@github.com:deadpoolcode1/iai_meta-bsp-iai.git master
    popd
}

sync_project()
{
	repo forall -c 'git reset --hard HEAD; git clean -fdx'
	repo sync -j4
}

help()
{
	echo $BASH_SOURCE "<parameter>"
	echo "setup - install all needed prerequisites for build"
	echo "build_image - build image for machine"
	echo "build_image_qemu - build image for QEMU"
	echo "rebuild_image - rebuild image for machine"
	echo "flash_to_emmc - flash image to emmc"
	echo "build_sdk - build SDK"
	echo "sync_project - syncs project sources"
	echo "update_meta_bsp_iai - update meta-bsp-iai from Git repository"
}


if [ -n "$*" ]; then
	eval "$*" # execute arguments
	#echo $* finished, ret=$?
else
	if [ "$0" != "$BASH_SOURCE" ]; then
		echo $BASH_SOURCE functions are loaded into the shell environment
	else
		echo $BASH_SOURCE - a library of shell utility functions
		echo To get help run \"$BASH_SOURCE _help\"
	fi
fi

